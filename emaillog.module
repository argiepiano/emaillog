<?php

/**
 * @file
 * Sends log entires by email.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function emaillog_form_system_logging_settings_alter(&$form, $form_state) {
  $emaillog_config = config('emaillog.settings');
  // Default Email settings
  $default_subject = '[site:name] [emaillog:severity:name]';

  $default_message  = "\nSite: [site:url]";
  $default_message .= "\nSeverity: ([emaillog:severity]) [emaillog:severity:name]";
  $default_message .= "\nTimestamp: [emaillog:timestamp]";
  $default_message .= "\nType: [emaillog:type]";
  $default_message .= "\nIP Address: [emaillog:ip]";
  $default_message .= "\nRequest URI: [emaillog:request_uri]";
  $default_message .= "\nReferrer URI: [emaillog:referer_uri]";
  $default_message .= "\nUser: ([emaillog:uid]) [emaillog:name]";
  $default_message .= "\n[emaillog:link]";
  $default_message .= "\n\n\n[emaillog:message]";

  $form['emaillog'] = array(
    '#title' => 'Email Log',
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#config' => 'emaillog.settings',
  );
  $form['emaillog']['emaillog_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send log entries by email'),
    '#default_value' => $emaillog_config->get('emaillog_enabled'),
  );
  $form['emaillog']['emaillog_severity'] = array(
    '#type' => 'select',
    '#title' => t('Minimum severity'),
    '#default_value' => !empty($emaillog_config->get('emaillog_severity')) ? $emaillog_config->get('emaillog_severity') : WATCHDOG_WARNING,
    '#options' => watchdog_severity_levels(),
    '#description' => t('Select minimum severity when entry should be sent by email.'),
  );
  $emaillog_recipient = !empty($emaillog_config->get('emaillog_recipient')) ? $emaillog_config->get('emaillog_recipient') : config_get('system.core', 'site_mail'); 
  $form['emaillog']['emaillog_recipient'] = array(
    '#type' => 'textfield',
    '#title' => t('Recipient'),
    '#default_value' => $emaillog_recipient,
    '#description' => t('Type email address where log entries should be sent to.'),
  );
  $form['emaillog']['messages'] = array(
    '#type' => 'fieldset',
    '#title' => t('Messages'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['emaillog']['messages']['emaillog_messages_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => !empty($emaillog_config->get('emaillog_messages_subject')) ? $emaillog_config->get('emaillog_messages_subject') : $default_subject,
    '#description' => t('Type the title of the notification message.'),
  );
  $form['emaillog']['messages']['emaillog_messages_body'] = array(
    '#type' => 'textarea',
    '#title' => 'Body',
    '#default_value' => !empty($emaillog_config->get('emaillog_messages_body')) ? $emaillog_config->get('emaillog_messages_body') : $default_message,
    '#description' => t('Type the body of the notification message.'),
  );
  $form['emaillog']['messages']['token_tree'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('emaillog'),
  );
}

/**
 * Implements hook_watchdog().
 */
function emaillog_watchdog(array $log_entry) {

  // Feature needs to be enabled from configuration
  if (!config_get('emaillog.settings', 'emaillog_enabled')) {
    return;
  }

  // Limit this feature to certain severity level
  $severity = !empty(config_get('emaillog.settings', 'emaillog_severity')) ? config_get('emaillog.settings', 'emaillog_severity') : WATCHDOG_WARNING;
  if (!($log_entry['severity'] <=  $severity)) {
    return;
  }

  global $base_url, $language;

  $severity_list = watchdog_severity_levels();

  $to = !empty(config_get('emaillog.settings', 'emaillog_recipient')) ? config_get('emaillog.settings', 'emaillog_recipient') : config_get('system.core', 'site_mail'); 
  $params = array();

  if (empty($log_entry['variables'])): $log_entry['variables'] = array(); endif;

  // Token replacement data
  $data = array(
    'severity' => $log_entry['severity'],
    'severity:name' => $severity_list[$log_entry['severity']],
    'timestamp' => format_date($log_entry['timestamp']),
    'type' => $log_entry['type'],
    'ip' => $log_entry['ip'],
    'request_uri' => $log_entry['request_uri'],
    'referer_uri' => $log_entry['referer'],
    'uid' => $log_entry['user']->uid,
    'name' => $log_entry['user']->name,
    'link' => strip_tags($log_entry['link']),
    'message' => t($log_entry['message'], $log_entry['variables']),
  );

  $params['subject'] = token_replace(config_get('emaillog.settings', 'emaillog_messages_subject'), $data);
  $params['message'] = token_replace(config_get('emaillog.settings', 'emaillog_messages_body'), $data);

  backdrop_mail('emaillog', 'entry', $to, $language, $params);
}

/**
 * Implements hook_mail().
 */
function emaillog_mail($key, &$message, $params) {
  switch ($key) {
    case 'entry':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      break;
  }
}
